#################################################
# Canine Distemper in Sea lion population model #
#                                               #
#                    INDEX                      #
#                0. parameters                  #
#              1. populate arrays               #
#               2. calculations                 #
#         3. initializing caluculations         #
#               4.  simulation                  #
#                5. graph it                    #
#                                               #
#################################################

rm(list=ls()) # all clear!
set.seed(pi) # add your favourtite number!

# function to example the corners of large 2D datasets, set rowcol = T to see the preiferal rows and columns
check <- function(x , size = 3 , rowcol = F){
  print("Upperleft")
  print(x[1:size,1:size])
  print("Bottomleft")
  print(x[(nrow(x)-(size-1)):nrow(x),1:size])
  print("Upperright")
  print(x[1:size,(ncol(x)-(size-1)):ncol(x)])
  print("Bottomright")
  print(x[(nrow(x)-(size-1)):nrow(x),(ncol(x)-(size-1)):ncol(x)])
  if (rowcol == T) {
    print("Firstrow")
    print(x[1,])
    print("Lastrow")
    print(x[nrow(x),])
    print("Firscolumn")
    print(x[,1])
    print("Lastcolumn")
    print(x[,ncol(x)])
  }
}

print(Sys.time())

# 0. initial conditions
# model parameters
epsilon_D <- 2 # spatial decay for dogs
epsilon_SL <- 3 # spatial decay for sea lions
scalek <- 10 # km (each pack occupies a (scale X scale) km^2 grid cell)
beta_D <- 0.2 # intraspecific contact rate for dogs
beta_SL <- 0.2 # intraspecific contact rate for sea lions
beta_prime <- 2.3e-2 # interspecies contact rate
sigma <- 1/7 # 1/average latent period
gamma <- 1/2 # 1/average infectious period
delta <- 5e-1 # death due to disease
sdd <- 1 - delta # average daily survival of infected individuals
muD.dogs <- 8.0e-4 # average daily death of non-infected individuals
muD.sealions <- 5.0e-4
muB.dogs <- 8.0e-4
# time
years <- 2
annum <- 365
time <- years*annum
BP <- 112
# space
island.rows <- 1
island.columns <- 1
total.cells <- island.rows*island.columns
# populations parameters
packs <- total.cells
total.dogs <- 13 # controls the density of dogs per pack
total.sealions <- 10
packs.dogs <- (sqrt(total.cells)-2)^2 # number of packs of dogs that occupy all cells
dogs <- ceiling(total.dogs/packs.dogs) # number of dogs per pack
#packs.sealions <- total.cells - packs.dogs
packs.sealions <- 1
sealions <- ceiling(total.sealions/packs.sealions) # number of sea lions per pack
# birth pulse parameters
gender.split <- 0.5 # the proportion of the population that is female
prop.rep <- 0.5 # the proportion of the population that has reproductive potential
prop.survive <- 0.95 # proportion of sea lion pups that survive birth
tt <- 1

# 1. populate arrays
# Matrices for recording dog data
S_D <- array(0 , dim = c(packs, time)) # Susceptibles 
E_D <- array(0 , dim = c(packs, time)) # Exposed
I_D <- array(0 , dim = c(packs, time)) # Infected
R_D <- array(0 , dim = c(packs, time)) # Recovered
D_D <- array(0 , dim = c(packs, time)) # Death
TD_D <- array(0 , dim = c(packs, time)) # total death
# Adds susceptibles in each pack
for(i in 1:packs){
  S_D[i, 1] <- dogs
}

# Matrices for recording sea lion data
S_SL <- array(0 , dim = c(packs, time)) # susceptibles 
E_SL <- array(0 , dim = c(packs, time)) # exposed
I_SL <- array(0 , dim = c(packs, time)) # infected
R_SL <- array(0 , dim = c(packs, time)) # recovered
D_SL <- array(0 , dim = c(packs, time)) # death
TD_SL <- array(0 , dim = c(packs, time)) # total death
for(i in 1:packs){
  S_SL[i, 1] <- sealions
}

muB <- array(0 , dim = c(packs, 365))
#muB[,1:BP] <- 0 # this is redundant

vac_SL <- array(0 , dim = c(1, 365))
vac_D <- array(0 , dim = c(1, 365))
#vac_D[364] <- 0.25  
#vac_SL[] <- x


# lambda arrays
lambda_D <- matrix(0, nrow = packs, ncol = 1) # this is the lambda matrix which resets for every value of time
lambda_SL <- matrix(0, nrow = packs, ncol = 1) # this is the lambda matrix which resets for every value of time

# 4. simulation
for (n in 1:years){
  print(n)
  print(Sys.time())
  seed <- array(1 , dim = c(1,4)) 
  for (q in 1:packs){
    muB[q,1:BP] <- births_func(S_SL, E_SL, I_SL, R_SL, gender.split, prop.rep, prop.survive)  
  }
  print(muB[,1])
  for (t in 2:(annum+1)){
    # Random dogs introduced every 91 days approximately
    I_D[seed[1], ((n-1)*365 + 1)] <- 1
    I_D[seed[2], ((n-1)*365+ 92)] <- 1
    I_D[seed[3], ((n-1)*365+ 183)] <- 1
    I_D[seed[4], ((n-1)*365+ 265)] <- 1
    tt <- t + 365*(n-1)
    for(i in 1:lattice_size[1]){ # starts at pack one and moves through the packs
      dog_dfval <- 0 # sets the initial lambda i to be 0 for dogs
      sealion_dfval <- 0 # sets the initial lambda i to be 0 for sea lions
      interspecies_dog <- 0
      interspecies_SL <- 0
      for(j in 1:lattice_size[2]){  # works through the columns starting at 1
        #dogs
        x <- dist_factor(I_D, epsilon_D, dog_dist) # this calculates the value that takes into account other packs
        dog_dfval <- dog_dfval + x #Used to sum all of the numbers
        xx <- dist_factor(I_SL, epsilon_SL, sealion_dist)
        interspecies_dog <- interspecies_dog + xx
        #sealions
        y <- dist_factor(I_SL, epsilon_SL, sealion_dist) # this calculates the value that takes into account other packs
        sealion_dfval <- sealion_dfval + y
        yy <- dist_factor(I_D, epsilon_SL, dog_dist)
        interspecies_SL <- interspecies_SL + yy
      }
      #dogs
      lambda_D[i] <- lambda_func(beta_D, beta_prime, I_D, dog_dfval, interspecies_dog)
      #sealions
      lambda_SL[i] <- lambda_func(beta_SL, beta_prime, I_SL, sealion_dfval, interspecies_SL)
    }
    for(k in 1:lattice_size[1]){# only needs to rotate through i because it doesn't need to reference any other packs, that is done in lambda
      # dogs
      S_D[k, tt] <- S_D_func(lambda_D, S_D, E_D, I_D, R_D, muD.dogs, muB.dogs, vac_D) # records number of susceptibles in the current time step
      E_D[k, tt] <- E_func(lambda_D, sigma, S_D, E_D, muD.dogs) # records number of exposed in the current time step
      I_D[k, tt] <- I_func(sigma, gamma, delta, E_D, I_D, muD.dogs) # records number of infected in current time step
      R_D[k, tt] <- R_func(gamma, S_D, I_D, R_D, muD.dogs, vac_D) # records number of recovered individuals in new time step
      D_D[k, tt] <- D_func(delta, I_D, muD.dogs)
      TD_D[k, tt] <- TD_func(delta, S_D, E_D, I_D, R_D, D_D, muD.dogs)
      # sea lions
      S_SL[k, tt] <- S_SL_func(lambda_SL, S_SL, E_SL, I_SL, R_SL, muD.sealions, muB, vac_SL) # records number of susceptibles in the current time step
      E_SL[k, tt] <- E_func(lambda_SL, sigma, S_SL, E_SL, muD.sealions) # records number of exposed in the current time step
      I_SL[k, tt] <- I_func(sigma, gamma, delta, E_SL, I_SL, muD.sealions) # records number of infected in current time step
      R_SL[k, tt] <- R_func(gamma, S_D, I_SL, R_SL, muD.sealions, vac_SL) # records number of recovered individuals in new time step
      D_SL[k, tt] <- D_func(delta, I_SL, muD.sealions)
      TD_SL[k, tt] <- TD_func(delta, S_SL, E_SL, I_SL, R_SL, D_SL, muD.sealions)
    }
  }
}

print(Sys.time())
